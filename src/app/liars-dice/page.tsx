/* eslint-disable @typescript-eslint/no-unsafe-assignment */
"use client";

import Button from "@mui/material/Button";
import { useState } from "react";
import Die from "../_components/liars-dice/die";
import { ButtonGroup } from "@mui/material";
import Call from "../_components/liars-dice/call";

export default function LiarsDice() {
  const HAND_SIZE = 5;
  const [dice, setDice] = useState([0, 0, 0, 0, 0]);
  const [quantity, setQuantity] = useState(0);
  const [face, setFace] = useState(0);
  const [tableQuantity, setTableQuantity] = useState(0);
  const [tableFace, setTableFace] = useState(0);

  // THIS WILL BE GENERATED BY ANOTHER MEANS LATER
  const rollDice = () => {
    const newDice = Array.from(
      { length: HAND_SIZE },
      () => Math.floor(Math.random() * 6) + 1,
    );
    console.log(newDice);
    setDice(newDice);
  };

  const updateTableValues = () => {
    setTableQuantity(quantity);
    setTableFace(face);
  };

  const decreaseBet = () => {
    if (quantity > 0 && quantity > tableQuantity) {
      setQuantity(quantity - 1);
    }
  };

  const increaseBet = () => {
    setQuantity(quantity + 1);
  };

  const disableCheck = (value: number) => {
    if (value <= tableFace && quantity <= tableQuantity) {
      return true;
    }
    return false;
  };

  const validRaise = () => {
    if (
      quantity > tableQuantity ||
      (quantity === tableQuantity && face > tableFace)
    ) {
      return true;
    }
    return false;
  };

  const disabledButtonStyle = "disabled:bg-primarydark";
  const selectedButtonStyle = (value: number) => {
    if (value === face) {
      return "bg-diceMediumDark";
    }
    return "";
  };

  return (
    <>
      <header className="p-4 text-center text-3xl font-semibold">
        Liar&apos;s Dice
      </header>
      <div className="grid gap-2 text-center md:grid-cols-4">
        <div className="bg-diceLight">Left Card</div>
        {/* middle card is going to be an interface with shared state */}
        <div className="bg-diceLight col-span-2 h-64">
          <span>Middle Card</span>
          <div className="flex justify-center">
            Last Call was:
            <Call quantity={tableQuantity} face={tableFace} />
          </div>
        </div>
        <div className="bg-diceLight">Right Card</div>
        <div className="bg-diceLight">Left Placeholder</div>

        <div className="bg-diceLight col-span-2 h-64">
          <div>Your Hand:</div>
          <div className="flex flex-row justify-center gap-1" key="userHand">
            <Die face={dice[0]} />
            <Die face={dice[1]} />
            <Die face={dice[2]} />
            <Die face={dice[3]} />
            <Die face={dice[4]} />
          </div>
          <Button color="success" variant="outlined" onClick={() => rollDice()}>
            ROLL
          </Button>
          <div className="grid grid-cols-2">
            <ButtonGroup
              variant="outlined"
              className="justify-center "
              aria-label="Quantity Buttons"
            >
              <Button onClick={increaseBet}>+1</Button>
              <Button onClick={decreaseBet}>-1</Button>
            </ButtonGroup>
            <ButtonGroup
              className="grid grid-cols-3 justify-center "
              variant="outlined"
            >
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(1)}`}
                onClick={() => setFace(1)}
                disabled={disableCheck(1)}
              >
                <Die face={1} />
              </Button>
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(2)}`}
                onClick={() => setFace(2)}
                disabled={disableCheck(2)}
              >
                <Die face={2} />
              </Button>
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(3)}`}
                onClick={() => setFace(3)}
                disabled={disableCheck(3)}
              >
                <Die face={3} />
              </Button>
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(4)}`}
                onClick={() => setFace(4)}
                disabled={disableCheck(4)}
              >
                <Die face={4} />
              </Button>
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(5)}`}
                onClick={() => setFace(5)}
                disabled={disableCheck(5)}
              >
                <Die face={5} />
              </Button>
              <Button
                className={`${disabledButtonStyle} ${selectedButtonStyle(6)}`}
                onClick={() => setFace(6)}
                disabled={disableCheck(6)}
              >
                <Die face={6} />
              </Button>
            </ButtonGroup>
          </div>
          <ButtonGroup orientation="vertical">
            <Button onClick={updateTableValues} disabled={!validRaise()}>
              Raise to <Call quantity={quantity} face={face} />
            </Button>
            <Button>Liar!</Button>
          </ButtonGroup>
        </div>
        <div className="bg-diceLight">Right Placeholder</div>
      </div>
    </>
  );
}
